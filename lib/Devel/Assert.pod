=head1 NAME

Devel::Assert - assertions for Perl >= 5.14

=head1 SYNOPSIS

    use Devel::Assert; # release mode, won't perform checks

    assert(3 > 2); 

    use Devel::Assert 'on';

    assert(3 > 2); # oops, check your math

=head1 FEATURES

=over 2

=item *

assert() call and all it's arguments are replaced with no-ops at compile time

=item *

not a source filter

=back

=head1 DESCRIPTION

This module provides you with a C-like assert() function - it completely disappears
when you don't want it. That's useful to force functions' contracts during development
without sacrificing production performance. 

That's just like tests, but inside your code.

    sub get_url {
        my ($self, $url, $cb) = @_;

        assert length $url;
        assert(ref($cb) eq 'CODE');

        ...
    }

=head1 USAGE

    use Devel::Assert; # import 'assert' function, but doesn't enable it
    use Devel::Assert 'on'; # import 'assert' function and enable it

    use Devel::Assert 'global'; # import 'assert' function and enable it in all later 'use Devel::Assert' imports
    use Devel::Assert::Global; # the same, can be used as perl -MDevel::Assert::Global your_program.pl

    use Devel::Assert 'off'; # import 'assert' function, but doesn't enable it, even when in 'global' mode

=head1 CHANGES FROM 0.04

This version significantly differs from 0.0x series. Main reason for that is to get rid of the
L<Devel::Declare> dependency and pass all parsing work to Perl itself instead of creating own
statement parser. Not all features are available in this release yet.

=head1 DISABLING ASSERTIONS

To temporary disable assertions you can use the following two options:

    no Devel::Assert;
    # or
    use Devel::Assert 'off';

But note that currently this feature is not lexically scoped. It disables checks right until the
next 'use Devel::Assert' statement (whenever it happens). This may be quite counterintuitive.

=head1 CAVEATS

assert() calls in text evals do not respect compile-time mode for the current module, but
rather take default mode - 'off', unless 'global' is in effect. If you want them 'on', import 
L<Devel::Assert> with 'on' flag inside your eval'ed string.

=head1 SEE ALSO

L<assertions> - for perls >= 5.9.0, uses code attributes

L<Carp::Assert> - requires annoying 'if DEBUG' suffix.

L<PerlX::Assert> - based on L<Devel::Declare>

=head1 AUTHOR

Sergey Aleynikov <randir@cpan.org>

=head1 COPYRIGHT

Copyright (C) 2009, 2015 Sergey Aleynikov

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut

